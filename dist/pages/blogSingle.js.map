{
  "version": 3,
  "sources": ["../../bin/live-reload.js", "../../src/js/pages/blogSingle.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener(\"change\", () =>\n   location.reload(),\n);\n", "// CSS import\n// import \"../../css/pages/blog-single.css\";\nimport \"../../css/components/cta.css\";\n\n// Function to calculate reading time\nfunction calculateReadingTime(content) {\n   const wordsPerMinute = 200; // Average reading speed\n   const text = content.innerText || content.textContent;\n   const wordCount = text.split(/\\s+/).length;\n   const readingTime = Math.ceil(wordCount / wordsPerMinute);\n   return readingTime;\n}\n\n// Function to display reading time for each post\nfunction displayReadingTime() {\n   const blogPosts = document.querySelector(\n      \".blog_single-content .blog_rich-text\",\n   ); // Adjust the selector to match your blog post content class\n   const timeToRead = calculateReadingTime(blogPosts);\n   const timeToReadElement = document.querySelector(\"#time-to-read\"); // Adjust the selector to match your time to read element class\n   if (timeToReadElement) {\n      timeToReadElement.textContent = `${timeToRead} min`;\n   }\n}\n\n// Call the function after the content has loaded\ndisplayReadingTime();\n\n// Function to fetch blog post content and display reading time\nasync function fetchAndDisplayReadingTime(blogUrl, timeToReadElementId) {\n   try {\n      const response = await fetch(blogUrl);\n      if (!response.ok) {\n         throw new Error(\"Network response was not ok\");\n      }\n      const html = await response.text();\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(html, \"text/html\");\n      const blogContent = doc.querySelector(\n         \".blog_single-content .blog_rich-text\",\n      ); // Adjust the selector to match your blog post content class\n      if (blogContent) {\n         const timeToRead = calculateReadingTime(blogContent);\n         const timeToReadElement = document.getElementById(timeToReadElementId);\n         if (timeToReadElement) {\n            timeToReadElement.textContent = `${timeToRead} min`;\n         }\n      }\n   } catch (error) {\n      console.error(\"Failed to fetch blog post content:\", error);\n   }\n}\n\n// Function to initialize reading time for all blog posts\nfunction initializeReadingTime() {\n   const blogPosts = document.querySelectorAll(\".blog-list .blog\");\n   blogPosts.forEach((blog) => {\n      const blogLink = blog.querySelector(\".blog_link\");\n      const timeToReadElement = blog.querySelector('[id^=\"time-to-read-\"]');\n\n      if (blogLink && timeToReadElement) {\n         const blogUrl = blogLink.href;\n         const timeToReadElementId = timeToReadElement.id;\n         fetchAndDisplayReadingTime(blogUrl, timeToReadElementId);\n      }\n   });\n}\n\ninitializeReadingTime();\n"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,uBAAY,UAAU,EAAE;AAAA,IAAiB;AAAA,IAAU,MACnE,SAAS,OAAO;AAAA,EACnB;;;ACGA,WAAS,qBAAqB,SAAS;AACpC,UAAM,iBAAiB;AACvB,UAAM,OAAO,QAAQ,aAAa,QAAQ;AAC1C,UAAM,YAAY,KAAK,MAAM,KAAK,EAAE;AACpC,UAAM,cAAc,KAAK,KAAK,YAAY,cAAc;AACxD,WAAO;AAAA,EACV;AAGA,WAAS,qBAAqB;AAC3B,UAAM,YAAY,SAAS;AAAA,MACxB;AAAA,IACH;AACA,UAAM,aAAa,qBAAqB,SAAS;AACjD,UAAM,oBAAoB,SAAS,cAAc,eAAe;AAChE,QAAI,mBAAmB;AACpB,wBAAkB,cAAc,GAAG,UAAU;AAAA,IAChD;AAAA,EACH;AAGA,qBAAmB;AAGnB,iBAAe,2BAA2B,SAAS,qBAAqB;AACrE,QAAI;AACD,YAAM,WAAW,MAAM,MAAM,OAAO;AACpC,UAAI,CAAC,SAAS,IAAI;AACf,cAAM,IAAI,MAAM,6BAA6B;AAAA,MAChD;AACA,YAAM,OAAO,MAAM,SAAS,KAAK;AACjC,YAAM,SAAS,IAAI,UAAU;AAC7B,YAAM,MAAM,OAAO,gBAAgB,MAAM,WAAW;AACpD,YAAM,cAAc,IAAI;AAAA,QACrB;AAAA,MACH;AACA,UAAI,aAAa;AACd,cAAM,aAAa,qBAAqB,WAAW;AACnD,cAAM,oBAAoB,SAAS,eAAe,mBAAmB;AACrE,YAAI,mBAAmB;AACpB,4BAAkB,cAAc,GAAG,UAAU;AAAA,QAChD;AAAA,MACH;AAAA,IACH,SAAS,OAAO;AACb,cAAQ,MAAM,sCAAsC,KAAK;AAAA,IAC5D;AAAA,EACH;AAGA,WAAS,wBAAwB;AAC9B,UAAM,YAAY,SAAS,iBAAiB,kBAAkB;AAC9D,cAAU,QAAQ,CAAC,SAAS;AACzB,YAAM,WAAW,KAAK,cAAc,YAAY;AAChD,YAAM,oBAAoB,KAAK,cAAc,uBAAuB;AAEpE,UAAI,YAAY,mBAAmB;AAChC,cAAM,UAAU,SAAS;AACzB,cAAM,sBAAsB,kBAAkB;AAC9C,mCAA2B,SAAS,mBAAmB;AAAA,MAC1D;AAAA,IACH,CAAC;AAAA,EACJ;AAEA,wBAAsB;",
  "names": []
}
